import requests
import os
import json
import pandas as pd
import logging
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import shapiro, pearsonr
from aiogram import F, Router
from dotenv import load_dotenv
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile

load_dotenv()


API_TOKEN = os.getenv("API_TOKEN")

router = Router()

data = pd.read_csv("weather_data.csv")
data['date'] = pd.to_datetime(data['date'])
is_awaiting_city = False

keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üèôÔ∏è–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")],
    [KeyboardButton(text="üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
    [KeyboardButton(text="üå§Ô∏è –ú–æ—è –ø–æ–≥–æ–¥–∞")]
], resize_keyboard=True)


@router.message(Command(commands=["help"]))
async def help_command(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/analyze - –±–µ—Ä–µ–º –Ω–µ–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π.\n"
    )


@router.message(Command(commands=["info"]))
async def info_command(message: Message):
    await message.answer(
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ(—Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à –≤—ã–±–æ—Ä), –∞ —Ç–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —è –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ.\n"
        "3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–≥–æ–¥—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã üå§Ô∏è –ú–æ—è –ø–æ–≥–æ–¥–∞.\n"
        "4. –ò–∑—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
    )


@router.message(CommandStart())
async def start_bot(message: Message):
    first_name = message.from_user.first_name if message.from_user.first_name is not None else ""
    last_name = message.from_user.last_name if message.from_user.last_name is not None else ""
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {first_name} {last_name}. –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π. ", reply_markup=keyboard)

@router.message(Command("analyze"))
async def send_analysis(message: Message):
    plot_avg_temp_humidity()
    photo = FSInputFile("avg_temp_humidity.png")
    await message.answer_photo(photo, caption="–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    
    plot_wind_speed_distribution()
    photo = FSInputFile("wind_speed_distribution.png")
    await message.answer_photo(photo, caption="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–µ—Ç—Ä–∞.")
    
    normality_result, p_value_normality = test_temperature_normality()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑—ã –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:\n"
                         f"{normality_result}\nP-value: {p_value_normality:.4f}")
    
    correlation_result, correlation_value = calculate_correlation()
    await message.answer(f"–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é:\n"
                         f"{correlation_result}\n–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {correlation_value:.2f}")

@router.message(F.text == "üèôÔ∏è–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
async def ask_city(message: Message):
    global is_awaiting_city
    is_awaiting_city = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")


@router.message(F.text == "üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
async def ask_city(message: Message):
    global is_awaiting_city
    is_awaiting_city = False
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")


@router.message(F.text == "üå§Ô∏è –ú–æ—è –ø–æ–≥–æ–¥–∞")
async def find_my_weather(message: Message):
    global is_awaiting_city
    is_awaiting_city = False
    data = load_user_data(message.from_user.id)
    if data:
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ/—Ä–∞–π–æ–Ω–µ: {data['city']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['temp']} ‚ÑÉ\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['temp_feels']} ‚ÑÉ\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {data['pressure']} –≥–ü–∞\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data['wind_speed']} –º/—Å"
        )
    else:
        await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ/—Ä–∞–π–æ–Ω–µ –Ω–µ—Ç.")


@router.message(F.text)
async def find_city_weather(message: Message):
    global is_awaiting_city
    if is_awaiting_city:
        try:
            user_id = message.from_user.id
            city = message.text.strip()
            response = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={API_TOKEN}")
            data = response.json()

            temp = str(round(data['main']['temp']))
            temp_feels = str(round(data['main']['feels_like']))
            pressure = str(data['main']['pressure'])
            wind_speed = str(data['wind']['speed'])
            city = city[0].upper() + city[1:]
            data_to_save = {"user_id": user_id,
                            "city": city,
                            "temp": temp,
                            "temp_feels": temp_feels,
                            "pressure": pressure,
                            "wind_speed": wind_speed}
            save_weather_to_file(data_to_save)
            await message.reply(
                f"–í –≥–æ—Ä–æ–¥–µ/—Ä–∞–π–æ–Ω–µ {city} –ø–æ–≥–æ–¥–∞ —Ç–∞–∫–∞—è:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ‚ÑÉ\n"
                f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temp_feels} ‚ÑÉ\n"
                f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
            await message.reply("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ—Ç –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        finally:
            is_awaiting_city = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    else:
        await message.reply("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç üèôÔ∏è–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥.")


@router.message(F.location)
async def find_city(message: Message):
    try:
        user_id = message.from_user.id
        lat = message.location.latitude
        lon = message.location.longitude
        response = requests.get(
            f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&lang=ru&units=metric&appid={API_TOKEN}')
        data = response.json()

        temp = str(round(data['main']['temp']))
        temp_feels = str(round(data['main']['feels_like']))
        pressure = str(data['main']['pressure'])
        wind_speed = str(data['wind']['speed'])
        city = data["name"]
        data_to_save = {"user_id": user_id,
                        "city": city,
                        "temp": temp,
                        "temp_feels": temp_feels,
                        "pressure": pressure,
                        "wind_speed": wind_speed}
        save_weather_to_file(data_to_save)
        await message.reply(
            f"–í –≥–æ—Ä–æ–¥–µ/—Ä–∞–π–æ–Ω–µ {city} –ø–æ–≥–æ–¥–∞ —Ç–∞–∫–∞—è:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ‚ÑÉ\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temp_feels} ‚ÑÉ\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
        )
    except:
        await message.reply("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")


def save_weather_to_file(dict):
    file_name = "db.json"
    with open(file_name, "r", encoding="utf-8") as file:
        try:
            all_data = json.load(file)
        except json.JSONDecodeError:
            all_data = []
    user_id = dict["user_id"]
    for entry in all_data:
        if entry["user_id"] == user_id:
            entry.update(dict)
            break
    else:
        all_data.append(dict)
    with open(file_name, "w", encoding="utf-8") as file:
        json.dump(all_data, file, ensure_ascii=False, indent=4)


def load_user_data(user_id):
    file_name = "db.json"
    with open(file_name, "r", encoding="utf-8") as file:
        all_data = json.load(file)
        for entry in all_data:
            if entry["user_id"] == user_id:
                return entry
    return None


def plot_avg_temp_humidity():
    avg_data = data.groupby(
        'city')[['temperature', 'humidity']].mean().reset_index()
    plt.figure(figsize=(10, 6))
    bar_width = 0.35
    x = range(len(avg_data['city']))

    plt.bar(x, avg_data['temperature'], width=bar_width,
            label='Avg Temperature (¬∞C)', color='blue')
    plt.bar([i + bar_width for i in x], avg_data['humidity'],
            width=bar_width, label='Avg Humidity (%)', color='orange')

    plt.xlabel("City")
    plt.ylabel("Values")
    plt.title("Average Temperature and Humidity by City")
    plt.xticks([i + bar_width / 2 for i in x], avg_data['city'])
    plt.legend()
    plt.grid(True)
    plt.savefig("avg_temp_humidity.png")
    plt.close()


def plot_wind_speed_distribution():
    plt.figure(figsize=(10, 6))
    sns.histplot(data['wind_speed'], kde=True, color='green', bins=10)
    plt.xlabel("Wind Speed (m/s)")
    plt.ylabel("Frequency")
    plt.title("Wind Speed Distribution")
    plt.grid(True)
    plt.savefig("wind_speed_distribution.png")
    plt.close()


def test_temperature_normality():
    stat, p_value = shapiro(data['temperature'])
    if p_value > 0.05:
        result = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º."
    else:
        result = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ."
    return result, p_value


def calculate_correlation():
    correlation, p_value = pearsonr(data['temperature'], data['humidity'])
    if p_value < 0.05:
        result = f"–ï—Å—Ç—å –∑–Ω–∞—á–∏–º–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é: {
            correlation:.2f}."
    else:
        result = "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–∏–º–æ–π."
    return result, correlation
