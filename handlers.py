import requests
import os
import json
from aiogram import F, Router
from dotenv import load_dotenv
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton


load_dotenv()


API_TOKEN = os.getenv("API_TOKEN")

router = Router()

keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üèôÔ∏è–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")],
    [KeyboardButton(text="üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
    [KeyboardButton(text="üå§Ô∏è –ú–æ—è –ø–æ–≥–æ–¥–∞")]
], resize_keyboard=True)


@router.message(CommandStart())
async def start_bot(message: Message):
    first_name = message.from_user.first_name if message.from_user.first_name is not None else ""
    last_name = message.from_user.last_name if message.from_user.last_name is not None else ""
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {first_name} {last_name}. –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ", reply_markup=keyboard)


@router.message(F.text == "üèôÔ∏è–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
async def ask_city(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")


@router.message(F.text == "üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
async def ask_city(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")


@router.message(F.text == "üå§Ô∏è –ú–æ—è –ø–æ–≥–æ–¥–∞")
async def find_my_weather(message: Message):
    data = load_user_data(message.from_user.id)
    if data:
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ/—Ä–∞–π–æ–Ω–µ: {data["city"]}"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data["temp"]} ‚ÑÉ\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data["temp_feels"]} ‚ÑÉ\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {data["pressure"]} –≥–ü–∞\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data["wind_speed"]} –º/—Å"
        )
    else:
        await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ/—Ä–∞–π–æ–Ω–µ –Ω–µ—Ç.")


@router.message(F.text)
async def find_city_weather(message: Message):
    try:
        user_id = message.from_user.id
        city = message.text.strip()
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={API_TOKEN}")
        data = response.json()
        temp = str(round(data['main']['temp']))
        temp_feels = str(round(data['main']['feels_like']))
        pressure = str(data['main']['pressure'])
        wind_speed = str(data['wind']['speed'])
        city = city[0].upper()+city[1:]
        data_to_save = {"user_id": user_id,
                        "city": city,
                        "temp": temp,
                        "temp_feels": temp_feels,
                        "pressure": pressure,
                        "wind_speed": wind_speed}
        save_weather_to_file(data_to_save)
        await message.reply(
            f"–í –≥–æ—Ä–æ–¥–µ/—Ä–∞–π–æ–Ω–µ {city} –ø–æ–≥–æ–¥–∞ —Ç–∞–∫–∞—è:\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ‚ÑÉ\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {temp_feels} ‚ÑÉ\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
        )
    except:
        await message.reply("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ—Ç –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@router.message(F.location)
async def find_city(message: Message):
    try:
        user_id = message.from_user.id
        lat = message.location.latitude
        lon = message.location.longitude
        response = requests.get(
            f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&lang=ru&units=metric&appid={API_TOKEN}')
        data = response.json()
        temp = str(round(data['main']['temp']))
        temp_feels = str(round(data['main']['feels_like']))
        pressure = str(data['main']['pressure'])
        wind_speed = str(data['wind']['speed'])
        city = data["sys"]["name"]
        data_to_save = {"user_id": user_id,
                        "city": city,
                        "temp": temp,
                        "temp_feels": temp_feels,
                        "pressure": pressure,
                        "wind_speed": wind_speed}
        save_weather_to_file(data_to_save)
        await message.reply(f" –ø–æ–≥–æ–¥–∞: {temp} –ø–æ —Ü–µ–ª—å—Å–∏—é")
    except:
        await message.reply("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")


def save_weather_to_file(dict):
    file_name = "db.json"
    with open(file_name, "r", encoding="utf-8") as file:
        try:
            all_data = json.load(file)
        except json.JSONDecodeError:
            all_data = []
    user_id = dict["user_id"]
    for entry in all_data:
        if entry["user_id"] == user_id:
            entry.update(dict)
            break
    else:
        all_data.append(dict)
    with open(file_name, "w", encoding="utf-8") as file:
        json.dump(all_data, file, ensure_ascii=False, indent=4)


def load_user_data(user_id):
    file_name = "db.json"
    with open(file_name, "r", encoding="utf-8") as file:
        all_data = json.load(file)
        for entry in all_data:
            if entry["user_id"] == user_id:
                return entry
    return None
